source('~/workspace/TCC/DM/apriori.R')
type(shrinked_dataset)
class(shrinked_dataset)
rules = apriori(shrinked_dataset, parameter = list(supp = 0.5, conf = 0.9, target = "p1_score"))
shrinked_dataset$p1_y
class(shrinked_dataset$p1_y)
??discretize
discretize(shrinked_dataset)
shrinked_dataset
class(shrinked_dataset$p1_horizontal)
for ( i in names(shrinked_dataset)){}
for ( i in names(shrinked_dataset)){
print("Class of i", class(shrinked_dataset[i]))
}
print(class(shrinked_dataset$p1_x))
for ( i in names(shrinked_dataset)){
print(class(shrinked_dataset[i]))
}
for ( i in names(shrinked_dataset)){
print(class(shrinked_dataset$i))
}
i = names(shrinked_dataset)
i
for (name in i){}
for (name in i){}
for (name in i){
print(class(shrinked_dataset[i]))
}
shrinked_dataset["p1_x"]
class(shrinked_dataset["p1_x"])
class(shrinked_dataset$p1_x)
class(shrinked_dataset$p1_y)
class(shrinked_dataset$p1_shoot)
discretize(shrinked_dataset$p1_x)
discretize(shrinked_dataset$p1_y)
class(shrinked_dataset$p1_y)
shrinked_dataset$p1_y
discretize(shrinked_dataset$p1_y, method = "interval")
library(neuralnet)
install.packages("neuralnet")
rules = apriori(shrinked_dataset, parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
rules
shrinked_dataset$p1_y, shrinked_dataset$p2_y
shrinked_dataset$p1_y
shrinked_dataset$p2_y
? discretizeDF
shrinked_dataset$p1_y = as.integer(shrinked_dataset$p1_y)
rules = apriori(shrinked_dataset, parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
shrinked_dataset$p1_y = discretize(shrinked_dataset$p1_y, method = "fixed")
shrinked_dataset$p1_y = discretize(shrinked_dataset$p1_y, method = "interval")
rules = apriori(shrinked_dataset, parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
shrinked_dataset = sapply(discretize, shrinked_dataset)
