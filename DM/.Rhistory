install.packages("dplyr")
source('~/workspace/TCC/DM/apriori2.R')
back_4 <- function(x, y){
for( i in y:y+4){
x[i] <- i
}
}
for ( i in 1:si){
if( sel_data$p1_score[i] == 1){
back_4(sel_data$p1_score, i)
}
}
source('~/workspace/TCC/DM/apriori2.R')
sel_data <- ssapply(sel_data, as.factor)
sel_data <- sapply(sel_data, as.factor)
require("arules")
rules = apriori(sel_data, parameter = list(conf=0.5, supp=0.2, target="rules"))
class(sel_data)
source('~/workspace/TCC/DM/apriori2.R')
rules
inspect(rules)
rules = apriori(sel_data, parameter = list(conf=0.2, supp=0.2, target="rules"))
inspect(rules)
View(rules)
setwd("/home/jio/workspace/TCC/DM/")
raw_data <- read.csv("output.csv")
sel_colums <- c("p1_x", "p1_y", "p1_score", "p2_x", "p2_y")
sel_data <- raw_data[,sel_colums]
si = nrow(sel_data)
for ( i in si:2){
if(sel_data$p1_score[i] > sel_data$p1_score[i-1]){
sel_data$p1_score[i] <- 1
}else{
sel_data$p1_score[i] <- 0
}
}
# Gambiarra! Seta os 3 valores anteriores a um acerto para 1
# isto é para aceitar as posições do personagem enquanto o
# projétil ainda está a caminho
for ( i in 1:si){
if( sel_data$p1_score[i] == 1){
sel_data$p1_score[i-3] <- 1
sel_data$p1_score[i-2] <- 1
sel_data$p1_score[i-1] <- 1
}
}
sel_data[sel_data[,"p1_score"] == 1]
sel_data[sel_data[,3] == 1]
was_score = sel_data[,"p1_score"] ==1
was_score
sel_data = sel_data[,was_score]
sel_data = sel_data[was_score,]
sel_data <- data.frame(sapply(sel_data, as.factor))
require("arules")
rules = apriori(sel_data, parameter = list(conf=0.2, supp=0.2, target="rules"))
inspect(rules)
rules = apriori(sel_data, parameter = list(conf=0.8, supp=0.2, target="rules"))
inspect(rules)
rules = apriori(sel_data, parameter = list(conf=0.1, supp=0.2, target="rules"))
inspect(rules)
head(rules)
list(rules)
length(rules)
rules
help(rules)
View(back_4)
??apriori
inspect(rules)
head(inspect(rules))
source('~/workspace/TCC/DM/apriori2.R')
inspect(rules)
as(lhs(rules), "list")
as(rhs(rules), "list")
left = as(lhs(rules), "list")
right = as(rhs(rules), "list")
right
class(right)
head(right)
right == "p1_score=1"
score = right == "p1_score=1"
score
left[score]
score = left[score]
score
score[class(score) != charecter]
class(score[1])
class(score[1][1])
class(score[1][1][1])
class(score[1][1][1][1])
score[1][1][1][1]
score
??s
??as
help(as)
str(rhs(rules)@itemInfo)
str(rhs(rules))
labels(rules)
rules = apriori(sel_data, parameter = list(conf=0.05, supp=0.1, target="rules"))
left = as(lhs(rules), "list")
right = as(rhs(rules), "list")
score = right == "p1_score=1"
score = left[score]
rules
inspect(rules)
inspect(rules)@rhs == "p1_score=1"
left = as(lhs(rules), "list")
right = as(rhs(rules), "list")
score = right == "p1_score=1"
score = left[score]
score
left
right
score
length(score)
for (i in length(score))
{}
for (i in length(score))
{
print( score[i])
}
for (i in 1:length(score))
{
print( score[i])
}
asdf = unlist(score)
asdf
unlist(score[1])
unlist(score[2])
unlist(score[6])
unlist(score[8])
score
unlist(score[10])
asdf = list()
for(i in unlist(score)){
asdf.append(i)
}
asdf = c()
for ( i in unlist(score)){
asdf = c(asdf, i)
}
asdf
remove(asdf)
asdf = list()
help(asdf)
??asdf
help(list)
class(asdf)
for(i in unlist(score)){
list.append(asdf, c(i))
}
for(i in unlist(score)){
asdf.append(asdf, c(i))
}
inspect(rules)
write.csv(inspect(rules), file = "in.csv")
data.frame(inspect(rules))
df = data.frame(inspect(rules))
df
df$rhs
df
df[,rhs="{p1_score=1}"]
df[,rhs]=="{p1_score=1}"
df$rhs == "{p1_score=1}"
pscore = df$rhs = "{p1_score=1}"
pscore
df$rhs
df = data.frame(inspect(rules))
pscore = df$rhs == "{p1_score=1}"
pscore
df[pscore,]
notnull = df$lhs != "{}"
notnull
pscore
pscore & notnull
df[pscore & notnull,]
unlist(strsplit(rules, "=> "))
unlist(strsplit(labels(rules), "=> "))
df[pscore & notnull,]
df = data.frame(inspect(rules))
pscore = df$rhs == "{p1_score}"
notnull = df$lhs != "{}"
relevant = df[pscore & notnull,]
relevant
pscore = df$rhs == "{p1_score=1}"
relevant = df[pscore & notnull,]
relevant
