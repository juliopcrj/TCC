install.packages(c("neuralnet", "rpart", "rpart.plot", "e1071", "caret", "arules", "arulesViz", "tidyverse", "magrittr", "stringr", "ggplot2", "nnet", "dplyr", "reshape2"))
library("ggplot2")
plot()
plot(0,0)
plot(1,0)
clear()
plot.function(1)
plot.function(x=1)
exit()
q()
library("swirl")
swirl()
swirl()
5+7
x <- 5+7
x
y = x-3
y
y <- x-3
u
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div = z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
install_course("Regression_Models")
swirl()
q()
import
library("rstan")
install.packages("rstan")
require('csv')
source('C:/Users/julio/workspace/TCC/DM/neuralnet.R')
getwd()
setwd("workspace/TCC/")
stats = read.csv("output.csv")
library(neuralnet)
data.norm = as.data.frame(sapply(stats, unclass))
scale_column = function(x){
return (x-min(x))/(max(x)-min(x))
}
data.norm = as.data.frame(lapply(data.norm, scale_column))
names(data.norm)
target = cbind("p1_horizontal", "p1_vertical", "p1_shoot")
fields = cbind(names(data.norm) != target)
'%!in' <- function(x,y)!('%in%'(x,y))
fields = cbind(names(data.norm) %!in% target)
target
target = c("p1_horizontal", "p1_vertical", "p1_shoot")
target
names(data.norm)
fields = cbind(names(data.norm) %!in% target)
fields = cbind(names(data.norm) != target)
fields = c(names(data.norm)[, -target])
fields = c(names(data.norm)[-target])
fields = c(names(data.norm)[!target])
n = names(data.norm)
n
class(n)
n[1]
'%!in%' <- function(x,y)!('%in%'(x,y))
n[%!in% target]
fields = c(names(data.norm) %!in% target)
remove(n)
fields
fields = c(names(data.norm)[names(data.norm) %!in% target])
fields
nn <- neuralnet(target~fields, hidden = 3)
nn <- neuralnet(target~fields,data.norm, hidden = 3)
fields = paste(names(data.norm)[names(data.norm) %!in% target], sep=' + ')
fields
fields = paste(names(data.norm)[names(data.norm) %!in% target], collapse=' + ')
fields
nn <- neuralnet(target~fields,data.norm, hidden = 3)
target = paste(target, collapse = " + ")
nn <- neuralnet(target~fields,data.norm, hidden = 3)
target
nn <- neuralnet("p1_shoot"~fields + "p1_horizontal" + "p1_vertical",data.norm, hidden = 3)
target = c("p1_shoot")
fields = paste(names(data.norm)[names(data.norm) %!in% target], collapse=' + ')
nn <- neuralnet("p1_shoot"~fields,data.norm, hidden = 3)
fields
nn <- neuralnet(p1_shoot~fields,data.norm, hidden = 3)
nn <- neuralnet(p1_shoot~p1_horizontal,data.norm, hidden = 3)
nn <- neuralnet(p1_shoot+p1_horizontal~p1_vertical,data.norm, hidden = 3)
nn <- neuralnet(p1_shoot + p1_horizontal + p1_vertical~p1_x + p1_y + p1_score + p2_x +
p2_y + p2_horizontal + p2_vertical + p2_shoot,
data.norm, hidden = 3)
stats = read.csv("output.csv")
data.norm = as.data.frame(sapply(stats, unclass))
scale_column = function(x){
return (x-min(x))/(max(x)-min(x))
}
data.norm = as.data.frame(lapply(data.norm, scale_column))
names(data.norm)
'%!in%' <- function(x,y)!('%in%'(x,y))
target = c("p1_shoot")
fields = paste(names(data.norm)[names(data.norm) %!in% target], collapse=' + ')
target = paste(target, collapse = " + ")
nn <- neuralnet(p1_shoot + p1_horizontal + p1_vertical~p1_x + p1_y + p1_score + p2_x +
p2_y + p2_horizontal + p2_vertical + p2_shoot,
data.norm, hidden = 3)
nrow(stats)
stats = read.csv("output.csv")
nrow(stats)
stats = read.csv("output.csv")
nrow(stats)
index = sample(data.norm, 0.7*nrow(data.norm))
amostra = 0.7 * nrow(data.norm)
index = sample(seq_len(nrow(data.norm), size=amostra))
index = sample(seq_len(nrow(data.norm)), size=amostra)
data.train = data.norm[index,]
data.test = data.norm[-index,]
nn <- neuralnet(p1_shoot + p1_horizontal + p1_vertical~p1_x + p1_y + p1_score + p2_x +
p2_y + p2_horizontal + p2_vertical + p2_shoot,
data.train, hidden = 3)
names(data.norm)
prev = compute(NN, data.test[,-c(4, 5, 6)])
prev = compute(nn, data.test[,-c(4, 5, 6)])
prev
prev$net.result
nrow(prev$net.result)
nrow(data.test)
