install.packages(c("neuralnet", "rpart", "rpart.plot", "e1071", "caret", "arules", "arulesViz", "tidyverse", "magrittr", "stringr", "ggplot2", "nnet", "dplyr", "reshape2"))
library("ggplot2")
plot()
plot(0,0)
plot(1,0)
clear()
plot.function(1)
plot.function(x=1)
exit()
q()
library("swirl")
swirl()
swirl()
5+7
x <- 5+7
x
y = x-3
y
y <- x-3
u
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div = z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
install_course("Regression_Models")
swirl()
q()
import
library("rstan")
install.packages("rstan")
require('csv')
setwd("TCC/")
data <- read.csv("output.csv")
data$p1_facing <- unclass(as.factor(data$p1_facing))
data$p2_facing <- unclass(as.factor(data$p2_facing))
data$p1_horizontal <- unclass(as.factor(data$p1_horizontal))
data$p2_horizontal <- unclass(as.factor(data$p2_horizontal))
data$p1_vertical <- unclass(as.factor(data$p1_vertical))
data$p2_vertical <- unclass(as.factor(data$p2_vertical))
library(neuralnet)
normalize = function(x){
return (x-min(x))/(max(x)-min(x))
}
data = as.data.frame(lapply(data, normalize))
data
nn <- neuralnet(p1_score ~ p1_x + p1_y + p2_x + p2_y, data, hidden=3)
plot(nn)
nn
names(nn)
nn$call
nn$model.list
nn$net.result
nn$act.fct
nn$act.fct()
nn$act.fct(data)
names(nn)
nn$linear.output
nn$result.matrix
nn$data
data
names(nn)
res = data$p1_score
res
for(i in res){}
for(i in res){
i <- runif(1)
}
res
res = runif(length(res), min =0, max = 1)
res
res = round(res)
res
data$p1_score = res
data
nn = neuralnet(p1_score ~ p1_x + p1_y + p2_x + p2_y, data, hidden = 3)
library(DMwR)
install.packages("DMwR")
library(DMwR)
knn()
knn
class(knn)
kNN
a = kNN()
install.packages("caTools")
KNN
kNN
library(DMwR)
kNN
k = kNN(p1_score~p1_x+p1_y+p2_x+p2_y, data, data)
samplesize = 0.6 * nrow(data)
samplesize
set.seed(80)
index = sample(seq_len(nrow(data)), size=samplesize)
index
train = data[index, ]
train
test = data[-index, ]
test
k = kNN(p1_score~p1_x+p1_y, train, test)
k = kNN(p1_score~p1_x+p1_y, train, test, norm=FALSE,k=3)
k
table(test[,'p1_score'], k)
plot(k)
names(k)
library(class)
knn
rep("r", 25)
k2 = knn(train, test, 4)
index = sample(seq_len(nrow(data)), size=0.5*nrow(data))
index
k2 = knn(data[index, ], data[-index,], 5)
length(data[index,])
length(data[-index,])
nrow(data[index,])
nrow(data[-index,])
nn
temptest = subset(test, select=c("p1_x","p1_y", "p2_x", "p2_y"))
temptest
head(temptest)
nn.results
nn.results = compute(nn, temptest)
nn.results
plot(nn.results)
plot(nn)
plot(nn)
nn.results
names(nn)
nn.results
data
nn$call
